import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# Set up the page
st.set_page_config(page_title="Excel Data Visualization Dashboard", page_icon="üìä")
st.title("üìä Excel-Based Demographic Visualization")

st.markdown("""
Upload an Excel file extracted from OCR data. This app will help visualize key demographics like:
- üßë‚Äçü§ù‚Äçüßë Age Group Distribution
- üöª Gender Breakdown (choose chart type)
- üè∑Ô∏è Caste Composition (select number of top castes)
""")

# Upload Excel file
uploaded_file = st.file_uploader("üì§ Upload Excel File (e.g., from 'rupandehi-3.xlsx')", type=["xlsx"])

def convert_to_nepali_number(num):
    eng = '0123456789'
    nep = '‡•¶‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø'
    return ''.join(nep[eng.index(ch)] if ch in eng else ch for ch in str(num))

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Clean caste column
    df['‡§ú‡§æ‡§§‡§ø'] = df['‡§ú‡§æ‡§§‡§ø'].astype(str).str.strip().replace({
        '‡§ó‡•Å‡§∞‡•Å‡§ô‡•ç‡§ó': '‡§ó‡•Å‡§∞‡•Å‡§ô', '‡§ó‡•Å‡§∞‡•Ç‡§ô‡•ç‡§ó': '‡§ó‡•Å‡§∞‡•Å‡§ô', '‡§ó‡•Å‡§∞‡•Ç‡§ô': '‡§ó‡•Å‡§∞‡•Å‡§ô'
    })

    # ---- AGE GROUP PIE CHART ----
    def categorize_age(age):
        if age < 20:
            return '<20'
        elif age <= 35:
            return '21‚Äì35'
        elif age <= 50:
            return '36‚Äì50'
        else:
            return '51+'

    df['Age Group'] = df['‡§â‡§Æ‡•á‡§∞'].apply(categorize_age)
    age_labels_nepali = {
        '<20': '‡•®‡•¶ ‡§µ‡§∞‡•ç‡§∑ ‡§Æ‡•Å‡§®‡§ø', '21‚Äì35': '‡•®‡•ß ‡§¶‡•á‡§ñ‡§ø ‡•©‡•´ ‡§µ‡§∞‡•ç‡§∑',
        '36‚Äì50': '‡•©‡•¨ ‡§¶‡•á‡§ñ‡§ø ‡•´‡•¶ ‡§µ‡§∞‡•ç‡§∑', '51+': '‡•´‡•ß ‡§µ‡§∞‡•ç‡§∑ ‡§Æ‡§æ‡§•‡§ø'
    }
    order = ['<20', '21‚Äì35', '36‚Äì50', '51+']
    age_counts = df['Age Group'].value_counts().reindex(order, fill_value=0)

    if st.checkbox("üìà Show Age Group Pie Chart"):
        labels = [age_labels_nepali[label] for label in order]
        hover_labels = [
            f"{age_labels_nepali[label]}<br>({convert_to_nepali_number(count)} ‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ)"
            for label, count in zip(order, age_counts.values)
        ]

        fig = go.Figure(data=[go.Pie(
            labels=labels,
            values=age_counts.values,
            hovertext=hover_labels,
            hoverinfo="text",
            textinfo='percent+label',
            textfont=dict(family="Nirmala UI, Mangal, Arial", size=14)
        )])
        fig.update_layout(title="‡§â‡§Æ‡•á‡§∞ ‡§∏‡§Æ‡•Ç‡§π ‡§µ‡§ø‡§§‡§∞‡§£")
        st.plotly_chart(fig, use_container_width=True)

    # ---- GENDER CHART (Dynamic) ----
    if st.checkbox("üß≠ Show Gender Distribution"):
        gender_chart_type = st.radio("Select Gender Chart Type", ["Pie Chart", "Bar Chart"], horizontal=True)
        gender_counts = df['‡§≤‡§ø‡§ô‡•ç‡§ó'].value_counts()
        labels = gender_counts.index.tolist()
        values = gender_counts.values.tolist()
        percentages = [round(v / sum(values) * 100, 1) for v in values]

        display_labels = [
            f"{label}<br>{convert_to_nepali_number(val)} ({p}%)"
            for label, val, p in zip(labels, values, percentages)
        ]

        if gender_chart_type == "Pie Chart":
            fig = go.Figure(data=[go.Pie(
                labels=labels,
                values=values,
                text=display_labels,
                hoverinfo='text',
                textinfo='text',
                marker=dict(colors=['#66B3FF', '#FF9999']),
                textfont=dict(family="Nirmala UI, Mangal, Arial", size=14)
            )])
            fig.update_layout(title="‡§≤‡§ø‡§ô‡•ç‡§ó ‡§µ‡§ø‡§§‡§∞‡§£")
            st.plotly_chart(fig, use_container_width=True)

        elif gender_chart_type == "Bar Chart":
            fig = go.Figure(data=[go.Bar(
                x=labels,
                y=values,
                text=display_labels,
                textposition='auto',
                marker_color=['#FF9999', '#66B3FF']
            )])
            fig.update_layout(
                title="‡§≤‡§ø‡§ô‡•ç‡§ó ‡§µ‡§ø‡§§‡§∞‡§£",
                xaxis_title="‡§≤‡§ø‡§ô‡•ç‡§ó",
                yaxis_title="‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
                font=dict(family="Nirmala UI, Mangal, Arial", size=14)
            )
            st.plotly_chart(fig, use_container_width=True)

    # ---- CASTE BAR CHART ----
    if st.checkbox("üè∑Ô∏è Show Castes by Gender"):
        top_n = st.slider("Select number of top castes to display:", min_value=5, max_value=50, value=10)
        top_castes = df['‡§ú‡§æ‡§§‡§ø'].value_counts().head(top_n).index.tolist()
        filtered = df[df['‡§ú‡§æ‡§§‡§ø'].isin(top_castes)]
        grouped = filtered.groupby(['‡§ú‡§æ‡§§‡§ø', '‡§≤‡§ø‡§ô‡•ç‡§ó']).size().unstack(fill_value=0)

        fig = go.Figure()
        for gender in grouped.columns:
            fig.add_bar(
                name=gender,
                x=grouped.index,
                y=grouped[gender],
                text=grouped[gender],
                hovertemplate='‡§ú‡§æ‡§§‡§ø: %{x}<br>‡§≤‡§ø‡§ô‡•ç‡§ó: ' + gender + '<br>‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ: %{y}<extra></extra>'
            )

        fig.update_layout(
            barmode='stack',
            title=f'‡§∂‡•Ä‡§∞‡•ç‡§∑ {top_n} ‡§ú‡§æ‡§§‡§ø‡§π‡§∞‡•Å‡§Æ‡§æ ‡§≤‡§ø‡§ô‡•ç‡§ó ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡•ç‡§§‡§∞‡•Ä‡§ï‡•É‡§§ ‡§¨‡§æ‡§∞ ‡§ö‡§æ‡§∞‡•ç‡§ü',
            xaxis_title='‡§ú‡§æ‡§§‡§ø',
            yaxis_title='‡§ú‡§®‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ',
            font=dict(family='Nirmala UI, Mangal, Arial', size=14),
            legend_title='‡§≤‡§ø‡§ô‡•ç‡§ó'
        )
        st.plotly_chart(fig, use_container_width=True)

else:
    st.warning("üìÑ ‡§ï‡•É‡§™‡§Ø‡§æ Excel ‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§ú‡§∏‡§Æ‡§æ '‡§â‡§Æ‡•á‡§∞', '‡§≤‡§ø‡§ô‡•ç‡§ó', '‡§ú‡§æ‡§§‡§ø' ‡§ï‡•ã ‡§∏‡•ç‡§§‡§Æ‡•ç‡§≠‡§π‡§∞‡•Ç ‡§õ‡§®‡•ç‡•§")